#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('renderer:server');
const http = require('http');
const host = '127.0.0.1';
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);
server.listen(port, host);
server.on('error', onError);
server.on('listening', onListening);

/**
  * Normalize a port into a number, string, or false.
  * @param {String|Number} val
  * @return {Number}
  */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

/**
  * Event listener for HTTP server "error" event.
  * @param {Error} error
  */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
  * Event listener for HTTP server "listening" event.
  */
function onListening() {
  debug('Listening on \x1b[35m%s\x1b[0m', `http://${host}:${port}`);
}
